{"version":3,"sources":["../../src/pipes/map-to-iterable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,IAAA,EAAoB,MAAO,eAAA,CAAgB;AAIhE;IAAA;IA0BA,CAAC;IAzBC,iCAAS,GAAT,UAAU,KAAU;QAAE,eAAe;aAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;YAAf,8BAAe;;QACnC,IAAI,MAAM,GAAe,EAAE,CAAC;QAE5B,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,GAAG,CAAC,CAAqB,UAAe,EAAf,KAAA,KAAK,CAAC,OAAO,EAAE,EAAf,cAAe,EAAf,IAAe;gBAA/B,IAAA,WAAY,EAAX,WAAG,EAAE,aAAK;gBAClB,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;aAC7B;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,GAAG,CAAC,CAAC,IAAI,KAAG,IAAI,KAAK,CAAC,CAAC,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,OAAA,EAAE,KAAK,EAAE,KAAK,CAAC,KAAG,CAAC,EAAE,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAWH,oBAAC;AAAD,CA1BA,AA0BC;;AAVM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBACnB,IAAI,EAAE,eAAe;gBACrB,IAAI,EAAE,IAAI;aACX,EAAG,EAAE;IACN,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"map-to-iterable.js","sourceRoot":"","sourcesContent":["import { Injectable, Pipe, PipeTransform } from '@angular/core';\r\n\r\n\r\n\r\nexport class MapToIterable implements PipeTransform {\r\n  transform(value: any, ..._args: any[]): any {\r\n    let result: Array<any> = [];\r\n\r\n    if (value.entries) {\r\n      for (var [key, value] of value.entries()) {\r\n        result.push({ key, value });\r\n      }\r\n    } else {\r\n      for (let key in value) {\r\n        result.push({ key, value: value[key] });\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\r\n  name: 'mapToIterable',\r\n  pure: true\r\n}, ] },\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}